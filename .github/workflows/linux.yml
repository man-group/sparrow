
name: Linux
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash -e -l {0}
jobs:
  build:
    runs-on: ubuntu-24.04
    name: ${{ matrix.compiler }} / ${{ matrix.version }} / ${{ matrix.arch }} / ${{ matrix.config }} / date-polyfill ${{ matrix.date-polyfill}} / shared ${{ matrix.shared }}
    env:
      SCCACHE_GHA_ENABLED: "true"
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]
        version: [10, 11, 12, 13, 14, 17, 18, 19, 20]
        arch: [64]
        config: [Debug, Release]
        date-polyfill: [ON, OFF]
        shared: [ON, OFF]
        exclude:
          - compiler: clang
            version: 10
          - compiler: clang
            version: 11
          - compiler: clang
            version: 12
          - compiler: clang
            version: 13
          - compiler: clang
            version: 14
          - compiler: gcc
            version: 17
          - compiler: gcc
            version: 18
          - compiler: gcc
            version: 19
          - compiler: gcc
            version: 20
          - compiler: gcc
            version: 10
            date-polyfill: OFF
          - compiler: gcc
            version: 11
            date-polyfill: OFF
          - compiler: gcc
            version: 12
            date-polyfill: OFF
        include:
          - compiler: gcc
            version: 13
            arch: 32
            config: Release
            date-polyfill: OFF
            shared: OFF
            
    steps:

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Install mold and pthread
      run: |
        sudo apt-get update
        sudo apt-get install -y mold libpthread-stubs0-dev libboost-thread-dev

    - name: Install GCC
      if: matrix.compiler == 'gcc'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: ${{matrix.version}}
        platform: x64

    - name: Install LLVM and Clang
      if: matrix.compiler == 'clang'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{matrix.version}}
        sudo apt-get install -y clang-tools-${{matrix.version}} 
        sudo update-alternatives --install /usr/bin/clang++				    clang++					    /usr/bin/clang++-${{matrix.version}} 200
        sudo update-alternatives --install /usr/bin/clang					    clang					      /usr/bin/clang-${{matrix.version}} 200
        sudo update-alternatives --install /usr/bin/clang-scan-deps   clang-scan-deps     /usr/bin/clang-scan-deps-${{matrix.version}} 200 
        sudo update-alternatives --set clang /usr/bin/clang-${{matrix.version}}
        sudo update-alternatives --set clang++ /usr/bin/clang++-${{matrix.version}}
        sudo update-alternatives --set clang-scan-deps /usr/bin/clang-scan-deps-${{matrix.version}}

    - name: Install 32bit support
      if: matrix.arch == '32'
      run: sudo apt-get install gcc-multilib g++-multilib

    - name: Install specific version of tzdata
      if: matrix.date-polyfill == 'OFF'
      run: sudo apt-get install tzdata=2024a-2ubuntu1 -y --allow-downgrades

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set conda environment
      uses: mamba-org/setup-micromamba@main
      with:
        environment-name: myenv
        environment-file: environment-dev.yml
        init-shell: bash
        cache-downloads: true

    - name: Configure using CMake
      run: |
        if [[ "${{matrix.arch}}" = 32 ]]; then export CXXFLAGS=-m32 ; export CFLAGS=-m32; fi
        if [[ "${{matrix.compiler}}" = "gcc" ]]; then export CC=gcc-${{matrix.version}}; export CXX=g++-${{matrix.version}}; else export CC=clang; export CXX=clang++; fi
        cmake -G Ninja \
          -Bbuild \
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.config}} \
          -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
          -DUSE_DATE_POLYFILL=${{matrix.date-polyfill}} \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=ON \
          -DCMAKE_C_COMPILER_LAUNCHER=sccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
          -DFETCH_DEPENDENCIES_WITH_CMAKE=MISSING \
          -DSPARROW_BUILD_SHARED=${{matrix.shared}} \
          -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=mold" \
          -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=mold"

    - name: Build library
      working-directory: build
      run: cmake --build . --config ${{matrix.config}} --target sparrow --parallel 8

    - name: Install
      working-directory: build
      run: cmake --install . --config ${{matrix.config}}

    - name: Build tests
      working-directory: build
      run: cmake --build . --config ${{matrix.config}} --target test_sparrow_lib --parallel 8

    - name: Run sccache stat for check
      shell: bash
      run: ${SCCACHE_PATH} --show-stats

    - name: Run tests
      working-directory: build
      run: |
        cmake --build . --config ${{matrix.config}} --target run_tests_with_junit_report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test_sparrow_lib_report_Linux_${{ matrix.compiler }}_${{ matrix.version }}_${{ matrix.config }}_m${{ matrix.arch }}_date-polyfill_${{ matrix.date-polyfill }}_shared_${{ matrix.shared }}
        path: ./**/test*.xml
        if-no-files-found: error

    - name: Run all examples
      working-directory: build
      run: cmake --build . --config ${{matrix.config}} --target run_examples

