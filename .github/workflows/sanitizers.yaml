name: Sanitizers
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash -e -l {0}
jobs:
  build:
    runs-on: ${{ matrix.sys.image }}
    name: sanitizer / ${{ matrix.sys.compiler }} / ${{ matrix.sys.version }} / ${{ matrix.sys.stdlib }} / ${{ matrix.config.name }} / date-polyfill ${{ matrix.sys.date-polyfill}} / shared ${{ matrix.sys.shared }}
    env:
      SCCACHE_GHA_ENABLED: "true"
    strategy:
      fail-fast: false
      matrix:
        sys:
        - {image: ubuntu-24.04, compiler: clang, version: '18', config-flags: '', stdlib: 'libstdc++-12', date-polyfill: 'ON', shared : 'ON'}

        config:
        - {name: Debug}

    steps:

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.6

    - name: Install LLVM and Clang
      if: matrix.sys.compiler == 'clang'
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: ${{matrix.sys.version}}
        arch: x64

    - name: Install the specified standard library for clang
      if: matrix.sys.compiler == 'clang'
      run: sudo apt install ${{matrix.sys.stdlib}}-dev -y

    - name: Install specific version of tzdata
      if: matrix.sys.date-polyfill == 'OFF'
      run: sudo apt-get install tzdata=2024a-2ubuntu1 -y --allow-downgrades

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set conda environment
      uses: mamba-org/setup-micromamba@main
      with:
        environment-name: myenv
        environment-file: environment-dev.yml
        init-shell: bash
        cache-downloads: true

    - name: Configure using CMake
      run: |
        cmake -G Ninja \
          -Bbuild ${{matrix.sys.config-flags}} \
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.config.name}} \
          -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
          -DUSE_DATE_POLYFILL=${{matrix.sys.date-polyfill}} \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=ON \
          -DCMAKE_C_COMPILER_LAUNCHER=sccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
          -DFETCH_DEPENDENCIES_WITH_CMAKE=MISSING \
          -DSPARROW_BUILD_SHARED=${{matrix.sys.shared}} \
          -DUSE_SANITIZER=address

    - name: Build library
      working-directory: build
      run: cmake --build . --config ${{matrix.config.name}} --target sparrow --parallel 8

    - name: Install
      working-directory: build
      run: cmake --install . --config ${{matrix.config.name}}

    - name: Build tests
      working-directory: build
      run: cmake --build . --config ${{matrix.config.name}} --target test_sparrow_lib --parallel 8

    - name: Run sccache stat for check
      shell: bash
      run: ${SCCACHE_PATH} --show-stats

    - name: Run tests
      working-directory: build
      run: | 
        export ASAN_OPTIONS=log_path=asan_log_:alloc_dealloc_mismatch=0:halt_on_error=0:handle_abort=0
        cmake --build . --config ${{matrix.config.name}} --target run_tests
      # env:
      #   # log_path is set to the path where ASAN will write the error report (seems ineffective)
      #   # alloc_dealloc_mismatch is set to 0 to deactivate unwanted ASAN warnings.
      #   # halt_on_error is set to 0 to avoid crashing the program after printing the first error report.
      #   # handle_abort is set to 0 to deactivate calls are handled as crashes by ASAN.
      #   # exitcode is set to 0 to avoid reporting the build as failed if ASAN detects an error.
      
    - name: Upload ASAN log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: asan-log-${{ matrix.sys.compiler }}-${{ matrix.sys.version }}-${{ matrix.config.name }}-${{ matrix.sys.date-polyfill }}
        path: '**/asan_log_*'
        if-no-files-found: ignore
        
    - name: Return errors if ASAN log content is not empty
      if: always()
      run: |
        if [ -s build/test/asan_log_* ]; then
          echo "ASAN detected errors. See the log for details."
          exit 1
        fi



