name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            echo "version=${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
          else
            # Get current version from header file
            if [ ! -f "include/sparrow/config/sparrow_version.hpp" ]; then
              echo "Error: sparrow_version.hpp not found"
              exit 1
            fi
            
            CURRENT_MAJOR=$(grep "constexpr int SPARROW_VERSION_MAJOR" include/sparrow/config/sparrow_version.hpp | awk '{print $5}' | tr -d ';')
            CURRENT_MINOR=$(grep "constexpr int SPARROW_VERSION_MINOR" include/sparrow/config/sparrow_version.hpp | awk '{print $5}' | tr -d ';')
            CURRENT_PATCH=$(grep "constexpr int SPARROW_VERSION_PATCH" include/sparrow/config/sparrow_version.hpp | awk '{print $5}' | tr -d ';')
            
            # Verify version numbers were found
            if [ -z "$CURRENT_MAJOR" ] || [ -z "$CURRENT_MINOR" ] || [ -z "$CURRENT_PATCH" ]; then
              echo "Error: Could not parse current version from header file"
              exit 1
            fi
            
            echo "Current version: ${CURRENT_MAJOR}.${CURRENT_MINOR}.${CURRENT_PATCH}"
            
            case "${{ github.event.inputs.version_type }}" in
              "major")
                NEW_VERSION="$((CURRENT_MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="${CURRENT_MAJOR}.$((CURRENT_MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="${CURRENT_MAJOR}.${CURRENT_MINOR}.$((CURRENT_PATCH + 1))"
                ;;
            esac
            echo "New version: $NEW_VERSION"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version in header file
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "$VERSION"
          
          # Get current binary version numbers
          CURRENT_BINARY=$(grep "constexpr int SPARROW_BINARY_CURRENT" include/sparrow/config/sparrow_version.hpp | awk '{print $5}' | tr -d ';')
          CURRENT_REVISION=$(grep "constexpr int SPARROW_BINARY_REVISION" include/sparrow/config/sparrow_version.hpp | awk '{print $5}' | tr -d ';')
          CURRENT_AGE=$(grep "constexpr int SPARROW_BINARY_AGE" include/sparrow/config/sparrow_version.hpp | awk '{print $5}' | tr -d ';')
          
          echo "Current binary version: $CURRENT_BINARY:$CURRENT_REVISION:$CURRENT_AGE"
          
          # Apply libtool versioning rules based on version bump type
          case "${{ github.event.inputs.version_type }}" in
            "patch")
              # Patch release: only increment revision (compatible changes)
              NEW_BINARY_CURRENT=$CURRENT_BINARY
              NEW_BINARY_REVISION=$((CURRENT_REVISION + 1))
              NEW_BINARY_AGE=$CURRENT_AGE
              ;;
            "minor")
              # Minor release: new APIs added, increment current and age, reset revision
              NEW_BINARY_CURRENT=$((CURRENT_BINARY + 1))
              NEW_BINARY_REVISION=0
              NEW_BINARY_AGE=$((CURRENT_AGE + 1))
              ;;
            "major")
              # Major release: breaking changes, increment current, reset revision and age
              NEW_BINARY_CURRENT=$((CURRENT_BINARY + 1))
              NEW_BINARY_REVISION=0
              NEW_BINARY_AGE=0
              ;;
          esac
          
          echo "New binary version: $NEW_BINARY_CURRENT:$NEW_BINARY_REVISION:$NEW_BINARY_AGE"
          
          # Update version numbers in header file
          sed -i "s/constexpr int SPARROW_VERSION_MAJOR = [0-9]*/constexpr int SPARROW_VERSION_MAJOR = $NEW_MAJOR/" include/sparrow/config/sparrow_version.hpp
          sed -i "s/constexpr int SPARROW_VERSION_MINOR = [0-9]*/constexpr int SPARROW_VERSION_MINOR = $NEW_MINOR/" include/sparrow/config/sparrow_version.hpp
          sed -i "s/constexpr int SPARROW_VERSION_PATCH = [0-9]*/constexpr int SPARROW_VERSION_PATCH = $NEW_PATCH/" include/sparrow/config/sparrow_version.hpp
          sed -i "s/constexpr int SPARROW_BINARY_CURRENT = [0-9]*/constexpr int SPARROW_BINARY_CURRENT = $NEW_BINARY_CURRENT/" include/sparrow/config/sparrow_version.hpp
          sed -i "s/constexpr int SPARROW_BINARY_REVISION = [0-9]*/constexpr int SPARROW_BINARY_REVISION = $NEW_BINARY_REVISION/" include/sparrow/config/sparrow_version.hpp
          sed -i "s/constexpr int SPARROW_BINARY_AGE = [0-9]*/constexpr int SPARROW_BINARY_AGE = $NEW_BINARY_AGE/" include/sparrow/config/sparrow_version.hpp
          
          git config --local user.name "GitHub Action"
          git add include/sparrow/config/sparrow_version.hpp
          git commit -m "Release version ${{ steps.version.outputs.version }}"
      
      - name: Create tag
        run: |
          git tag "v${{ steps.version.outputs.version }}"
      
      - name: Push changes and tag
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.version }}"
      
      - name: Create GitHub Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: "Release v${{ steps.version.outputs.version }}"
          release_name: "Release v${{ steps.version.outputs.version }}"
          tag: "v${{ steps.version.outputs.version }}"
          draft: false
          prerelease: false
